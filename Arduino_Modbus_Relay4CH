

/*-----( Import needed libraries )-----*/
#include <SoftwareSerial.h>
/*-----( Declare Constants and Pin Numbers )-----*/
#define SSerialRX        10  //Serial Receive pin
#define SSerialTX        11  //Serial Transmit pin

#define SSerialTxControl 3   //RS485 Direction control
#define SSerialTxControl1 2 

#define RS485Transmit    HIGH
#define RS485Receive     LOW

#define Pin13LED         13

/*-----( Declare objects )-----*/
SoftwareSerial RS485Serial(SSerialRX, SSerialTX); // RX, TX

/*-----( Declare Variables )-----*/
int byteReceived;
int byteSend;

void setup()   /****** SETUP: RUNS ONCE ******/
{
  // Start the built-in serial port, probably to Serial Monitor
  Serial.begin(9600);
  Serial.println("YourDuino.com SoftwareSerial remote loop example");
  Serial.println("Use Serial Monitor, type in upper window, ENTER");
  
  pinMode(Pin13LED, OUTPUT);   
  pinMode(SSerialTxControl, OUTPUT);    
  
  digitalWrite(SSerialTxControl, RS485Receive);  // Init Transceiver   
    digitalWrite(SSerialTxControl1, RS485Receive);  // Init Transceiver   

  // Start the software serial port, to another device
  RS485Serial.begin(9600);   // set the data rate 


  
}

uint16_t CRC16(uint8_t *buf, int len) {  
  uint16_t crc = 0xFFFF;
  for (uint16_t pos = 0; pos < len; pos++) {
    crc ^= (uint16_t)buf[pos];        // XOR byte into least sig. byte of crc
    for (int i = 8; i != 0; i--) {    // Loop over each bit
      if ((crc & 0x0001) != 0) {      // If the LSB is set
        crc >>= 1;                    // Shift right and XOR 0xA001
        crc ^= 0xA001;
      } else {                        // Else LSB is not set
        crc >>= 1;                    // Just shift right
      }
    }
  }

  return crc;
}

void relayWrite(uint8_t n, bool setToON) {
  if (n < 1 || n > 4) {
    return;
  }
  uint8_t buff[] = {
    0x01,                  // Devices Address
    0x05,                  // Function code
    0x00,                  // Start Address HIGH
    n - 1,                 // Start Address LOW
    setToON ? 0xFF : 0x00, // Data 1 HIGH
    0x00,                  // Data 1 LOW
    0,                     // CRC LOW
    0                      // CRC HIGH
  };

  uint16_t crc = CRC16(&buff[0], 6);
  buff[6] = crc & 0xFF;
  buff[7] = (crc >> 8) & 0xFF;

  Serial.println(buff[0],HEX);
  Serial.println(buff[1],HEX);
  Serial.println(buff[2],HEX);
  Serial.println(buff[3],HEX);
  Serial.println(buff[4],HEX);
  Serial.println(buff[5],HEX);
  Serial.println(buff[6],HEX);
  Serial.println(buff[7],HEX);
  
  RS485Serial.write(buff, sizeof(buff));
  RS485Serial.flush(); // wait MODE_SEND completed

  if (!RS485Serial.find("\x01\x05")) {
    Serial.println("Write to Relay error !");
    return;
  }
}
int flag =0;
void loop()   
{
  digitalWrite(Pin13LED, HIGH);  // Show activity
  if (Serial.available())
  {
    byteReceived = Serial.read();
    Serial.print("byteReceived =");
    Serial.println(byteReceived);
    if(byteReceived == 49 )
    {
      Serial.print("byteReceived =");
      Serial.println(byteReceived, DEC);
      digitalWrite(SSerialTxControl, RS485Transmit);  // Enable RS485 Transmit   
      digitalWrite(SSerialTxControl1, RS485Transmit);  // Enable RS485 Transmit   
      uint8_t buff1[] = {
        0x01,                  // Devices Address
        0x05,                  // Function code
        0x00,                 
        0,                     // Relay1
        0xFF, 
        0x00,                  
        0,                     // CRC LOW
        0                      // CRC HIGH
      };
      uint16_t crc = CRC16(&buff1[0], 6);
      buff1[6] = crc & 0xFF;
      buff1[7] = (crc >> 8) & 0xFF;
      RS485Serial.write(buff1[0]);
      RS485Serial.write(buff1[1]);
      RS485Serial.write(buff1[2]);
      RS485Serial.write(buff1[3]);
      RS485Serial.write(buff1[4]);
      RS485Serial.write(buff1[5]);
      RS485Serial.write(buff1[6]);
      RS485Serial.write(buff1[7]);
      delay(1000);
      
      buff1[0] = 0x01;
      buff1[1] = 0x05;
      buff1[2] = 0x00;
      buff1[3] = 0;           // Relay1
      buff1[4] = 0x00;
      buff1[5] = 0x00;
      crc = CRC16(&buff1[0], 6);
      buff1[6] = crc & 0xFF;
      buff1[7] = (crc >> 8) & 0xFF;
      RS485Serial.write(buff1[0]);
      RS485Serial.write(buff1[1]);
      RS485Serial.write(buff1[2]);
      RS485Serial.write(buff1[3]);
      RS485Serial.write(buff1[4]);
      RS485Serial.write(buff1[5]);
      RS485Serial.write(buff1[6]);
      RS485Serial.write(buff1[7]);
      delay(1000);   
      digitalWrite(Pin13LED, LOW);  // Show activity    
      delay(10);
      digitalWrite(SSerialTxControl, RS485Receive);  // Init Transceiver   
      digitalWrite(SSerialTxControl1, RS485Receive);  // Init Transceiver   
    }
   if(byteReceived == 50 )
    {
      Serial.print("byteReceived =");
      Serial.println(byteReceived, DEC);
      digitalWrite(SSerialTxControl, RS485Transmit);  // Enable RS485 Transmit   
      digitalWrite(SSerialTxControl1, RS485Transmit);  // Enable RS485 Transmit   
      uint8_t buff1[] = {
        0x01,                  // Devices Address
        0x05,                  // Function code
        0x00,                  // Start Address HIGH
        1,                     // Relay2
        0xFF, // Data 1 HIGH
        0x00,                 
        0,                     // CRC LOW
        0                      // CRC HIGH
      };
      uint16_t crc = CRC16(&buff1[0], 6);
      buff1[6] = crc & 0xFF;
      buff1[7] = (crc >> 8) & 0xFF;
      RS485Serial.write(buff1[0]);
      RS485Serial.write(buff1[1]);
      RS485Serial.write(buff1[2]);
      RS485Serial.write(buff1[3]);
      RS485Serial.write(buff1[4]);
      RS485Serial.write(buff1[5]);
      RS485Serial.write(buff1[6]);
      RS485Serial.write(buff1[7]);
      delay(1000);
      
      buff1[0] = 0x01;
      buff1[1] = 0x05;
      buff1[2] = 0x00;
      buff1[3] = 1; // Relay1
      buff1[4] = 0x00 ;
      buff1[5] = 0x00;
      crc = CRC16(&buff1[0], 6);
      buff1[6] = crc & 0xFF;
      buff1[7] = (crc >> 8) & 0xFF;
      RS485Serial.write(buff1[0]);
      RS485Serial.write(buff1[1]);
      RS485Serial.write(buff1[2]);
      RS485Serial.write(buff1[3]);
      RS485Serial.write(buff1[4]);
      RS485Serial.write(buff1[5]);
      RS485Serial.write(buff1[6]);
      RS485Serial.write(buff1[7]);
      delay(1000);   
      digitalWrite(Pin13LED, LOW);  // Show activity    
      delay(10);
      digitalWrite(SSerialTxControl, RS485Receive);  // Init Transceiver   
      digitalWrite(SSerialTxControl1, RS485Receive);  // Init Transceiver   
    }
  }
     if(byteReceived == 51 )
    {
      Serial.print("byteReceived =");
      Serial.println(byteReceived, DEC);
      digitalWrite(SSerialTxControl, RS485Transmit);  // Enable RS485 Transmit   
      digitalWrite(SSerialTxControl1, RS485Transmit);  // Enable RS485 Transmit   
      uint8_t buff1[] = {
        0x01,                  // Devices Address
        0x02,                  // Function code
        0x00,                  // Start Address HIGH
        0x00,                  // Relay2
        0x00,                  // Data 1 HIGH
        0x08,                 
        0,                     // CRC LOW
        0                      // CRC HIGH
      };
      uint16_t crc = CRC16(&buff1[0], 6);
      buff1[6] = crc & 0xFF;
      buff1[7] = (crc >> 8) & 0xFF;
      RS485Serial.write(buff1[0]);
      RS485Serial.write(buff1[1]);
      RS485Serial.write(buff1[2]);
      RS485Serial.write(buff1[3]);
      RS485Serial.write(buff1[4]);
      RS485Serial.write(buff1[5]);
      RS485Serial.write(buff1[6]);
      RS485Serial.write(buff1[7]);  
      digitalWrite(SSerialTxControl, RS485Receive);  // Init Transceiver   
      digitalWrite(SSerialTxControl1, RS485Receive);  // Init Transceiver   
    }
  if (RS485Serial.available())  //Look for data from other Arduino
   {
      digitalWrite(Pin13LED, HIGH);  // Show activity
      byteReceived = RS485Serial.read();    // Read received byte
      Serial.print(byteReceived,HEX);        // Show on Serial Monitor
      flag = 1;
      delay(10);
      digitalWrite(Pin13LED, LOW);  // Show activity   
   }
   else{
     if(flag == 1)
     {
      flag = 0;
      Serial.println("");        // Show on Serial Monitor
     }
   }
}
